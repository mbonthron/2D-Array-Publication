function [data] = init_shape(shapeNum, data)
run('points_chain_direct')
% data.b_vector = zeros(data.N,1);
% %% Start with elastic deformation
% [data] = initialize_elastic_deformation(zeros(data.N,1),zeros(data.V,1),data);
% 
% %Consider what's actually necessary since this is going into COCO
% data.e_vector = 0*ones(data.N,1);
% data.t_vector = 0.01*pi*ones(data.N,1);
data = determine_adjacency_matrix(data);
plot_grid(data, 1) %debugging, ask Michael for his nice plotting code

if shapeNum == 1
    %Rhombus
    %% === Load a points data for the system
    %run('points_rhombus_direct')
    nodes_to_remove = [3,6,9,12];
    connections_to_remove = [];
    data.shape_name = 'Rhombus';
    
    data = remove_node(data, nodes_to_remove);
    plot_grid(data, 1)

    %run('points_chain_direct')

    % Determine the adjacency matrix and number of arches
    
    
    data = add_periodicity(data);
    plot_grid(data, 1) %debugging, ask Michael for his nice plotting code
    
    

    data = remove_connection(data,connections_to_remove);

elseif shapeNum == 2

    connections_to_remove = [1 3
                         3 5
                         3 8
                         6 4
                         6 7
                         6 9
                         9 7
                         9 10
                         10 12
                         9 12
                         12 1
                         3 4
                         3 6
                         3 12];

elseif shapeNum == 3

elseif shapeNum == 4

elseif shapeNum == 5

elseif shapeNum == 6


end
    plot_grid(data, 1) %debugging, ask Michael for his nice plotting code
    data.b_vector = zeros(data.N,1);
    %% Start with elastic deformation
    [data] = initialize_elastic_deformation(zeros(data.N,1),zeros(data.V,1),data);
    
    %Consider what's actually necessary since this is going into COCO
    data.e_vector = 0*ones(data.N,1);
    data.t_vector = 0.01*pi*ones(data.N,1);

    % Determine the coefficient matrix and number of constraints of the system
    data = determine_coefficient_matrix(data);
    data = determine_modes_to_skip(data);
end

